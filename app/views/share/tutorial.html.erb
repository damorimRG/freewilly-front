<div class="row">
    <div class="col-lg-12">
        <h2>Using <%= project_name %> to create a sample based on a server-side web framework</h2>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <article class="post">

            <header class="post-header">
                <p class="post-meta">
                    <time datetime="2018-11-22T00:00:00+00:00"
                          itemprop="datePublished">Dec. 15, 2018</time>

<!--                    <a href="mailto:lhsm@cin.ufpe.br"><span itemprop="author" itemscope="" itemtype="http://schema.org/Person"><span itemprop="name">Lu√≠s Melo</span></span></a>-->
                </p>
            </header>

            <div class="post-content" itemprop="articleBody">
                <p>This tutorial shows how to use <%= project_name %>
                    to create and deploy an Express.js minimalistic
                    app. A very similar method can be used to
                    prototype apps for other frameworks.</p>
                
                <p>Background. It is important that the reader
                understands the following concepts before
                continuing.</p>
                <ul>
                   <li><b>(<%= project_name %>) Session</b>: The 2h
                      period a developer can interact with
                      <%= project_name %>). Sessions are anonymous,
                      which means you don't have an account to save
                      your work, but note that you can continue and
                      share your work by pressing the share
                      icon<img src=""/>. When accessing that link,
                      <%= project_name %> creates a new session based
                      on the contents stored in the original
                      session.</li>
                    <li><b>(<%= project_name %>) Virtual Machine
                    (VM)</b>: A machine that will be hosted in our
                    servers. You can create as many VMs as necessary
                    for the period of a session. This should be
                    important when working with microsservices. </li>
                    <li><b>(Docker) Image</b>: A file encapsulating
                    the OS that will be used to run your example. This
                    file is not visible to you (it is stored in the
                    Docker registry). Docker uses the file
                    '<code>Dockerfile</code>'--this one visible to the
                    user--to create an image. One can find the images
                    available in a virtual machine using the command
                    "<code>$> docker images</code>".</li>
                    <li><b>(Docker) Container</b>: Conceptually, a
                    container is an image in execution; it is called
                    that way because it isolates a running environment
                    from other containers. One can find all containers
                    available in a virtual machine using the command
                    "<code>$> docker ps -a</code>".</li>
                   <li><b>(<%= project_name %>) Card</b>: A card is a
                   <%= project_name %> abstraction to bootstrap a
                   <%= project_name %> session. A developer can use a
                   card to start a session with coding artifacts as to
                   speedup prototyping. These artifacts include
                   a <code>Dockerfile</code> and boilerplate code
                   associated with the purpose of the card.</li>
                </ul>
                   

                <h2 id="task-0-prerequisites">
                    <a name="task0"></a>Task 1: Check prerequisites</h2>

                <p>You will need a modern browser to complete this
                tutorial. We will explain the pieces of Express.js
                code covered and the Docker commands discussed along
                the way, so prior knowledge on these is not
                needed.</p>

                <h2 id="task-1-clone">
                    <a name="task1"></a>Task 2: Create a session</h2>

                <p> Select
                the <a href="<%= run_instance_path('e233f248-cea4-49b3-968e-89a01b4247a1')
                %>">Express.js card</a> from the home page. </p>
                
                <p> This selection has the following effects:</p>
                <ul>
                  <li>it creates a <%= project_name %> session with one virtual machine in it</li>
                  <li>it adds a <code>Dockerfile</code> for Express.js
                  (it does <b>not</b> create image or container)</li>
                  <li>it adds boilerplate code--index.js--for a web service</li>
                </ul>

                <h2 id="task-2-modify-the-website">
                 <a name="Task_2"></a>Task 3: Modify the website</h2>

                <p>Before continuing, make sure you are in
                the <code class="highlighter-rouge">/root</code>
                directory by
                typing <code class="highlighter-rouge">pwd</code> from
                the shell. This is the base directory for making
                changes in your environment. After that, click the
                "Editor" button. You can make changes to the files
                using the file editor that will show
                up. Alternatively, you can
                use <code class="highlighter-rouge">vim</code> from
                the shell, if you prefer.</p> 

                <p> After those checks, modify the
                file <code class="highlighter-rouge">/root/index.js</code>
                (shown below) to print a different ouput. This file
                contains Express.js code (a dialect of Node.js) to
                respond to an HTTP request to the base URL of your app
                (see string <code class="highlighter-rouge">'/'</code>
                at line 4). Modify the
                string <code class="highlighter-rouge">"Hello
                world!"</code> however you want. Note that the string
                is passed to the
                function <code class="highlighter-rouge">send</code>
                from
                object <code class="highlighter-rouge">res</code>,
                which denotes the response to an HTTP request.</p>

                <pre><code class="language-.term1">1: var express = require('express');
2: var app = express();
3: 
4: app.get('/', function(req, res){
5:     res.send("Hello world!"); // <-- here
6: });
7: 
8: app.listen(8080);</code></pre>

                <h2 id="task-3-package-and-run-a-custom-app-using-docker">
                    <a name="Task_3"></a>Task 4: Create the Docker image</h2>

                <p>If you don't remember the definition a Docker
                image, please check the definitions at the beginning
                of this tutorial.</p>

                <ol>
                    <li>
                        <p>Display the contents of the Dockerfile.</p>

                        <pre><code class="language-.term1">$> cat Dockerfile</code></pre>

                        <div class="highlighter-rouge">
                            <div class="highlight"><pre class="highlight"><code>FROM node:6.9.5
RUN mkdir /app && cd /app
WORKDIR /app
RUN npm install --save express
COPY . /app
EXPOSE 8080
CMD node index.js
</code></pre></div>
                        </div>

                        <p>Let's see what each of these commands do.</p>

                        <ul>
                            <li><a href="https://docs.docker.com/engine/reference/builder/#from">FROM</a>
                            specifies the base image of the new image
                            you're creating (yes, images are
                            layered). For this example, the base image
                            is <code class="highlighter-rouge">node:6.9.5</code>,
                            which builds on some Linux distribution.
                            </li>
<li><a href="https://docs.docker.com/engine/reference/builder/#run">RUN</a>
  executes
  the corresponding command in a new layer on top of the current
  image. The resulting image will be used in the following commands
  from the Dockerfile.</li>
</li>
<li><a href="https://docs.docker.com/engine/reference/builder/#workdir">WORKDIR</a>
  sets the working directory that is used by other Docker commands.
                            <li><a href="https://docs.docker.com/engine/reference/builder/#copy">COPY</a>
                            copies files from the host (in this case a
                            <%= project_name %> VM) into the image. In
                            this example,
                            the <code class="highlighter-rouge">COPY</code>
                            command is used to copy the contents of
                            the
                            <code>/root</code> directory (in the
                            host) into the
                            <code class="highlighter-rouge">app</code>
                            directory (in the image).</li>
                            <li><a href="https://docs.docker.com/engine/reference/builder/#expose">EXPOSE</a>
                            sets which port(s) the application uses.</li>
                            <li><a href="https://docs.docker.com/engine/reference/builder/#cmd">CMD</a>
                            specifies what command to run when a
                            container is started from the
                            image. </li>
                        </ul>
                    </li>

                    <li>
                        <p>Use the following command to create the
                        image.

                          <pre><code class="language-.term1">$> docker image build --tag expressapp:1.0 . </code></pre>


                        <ul>
                            <li>The <code class="highlighter-rouge">--tag</code>
                            option specifies a custom name for later reference.</li>
                            <li>The <code class="highlighter-rouge">.</code>
                            at the end of the command tells Docker to
                            use the current directory to look for the
                            file <code>Dockerfile</code></li>
                        </ul>

                        <p>Execution of this command generates a good
                        amount of output on screen (check if your
                        output
                        matches <a href="express-tutorial-output.txt">ours<a>). To
                        sum, this command downloads all dependent
                        images, creates the
                        image <code>expressapp:1.0</code> based on
                        those pieces, and stores it in the Docker
                        registry. It does <b>not</b> create
                        containers. Check if the
                        image <code>expressapp:1.0</code> is available
                        in the registry with the command "<code>$>
                        docker images</code>".</p>
                 
                    </li>

</ol>

                <h2 id="task-5">
                    <a name="Task_5"></a>Task 5: Spawn the container</h2>

<ol>


  <li>
    <p>Use the following command to start a new
      container from the image you created. </p>
    
    <pre><code class="language-.term1"> docker run --publish 8080:8080 --name expressapp expressapp:1.0</code></pre>
    
    <p>Note the <code>CMD</code> command from the
      Dockerfile. It is responsible for running the
      Express.js webserver on the container. As this
      container will be running an Express.JS web
      server, we need to connect the ports on the VM
      and the container. The
      option <code class="highlighter-rouge">--publish
        host_port:container_port</code> does
      that. It enables traffic to the host (VM) to
      be forwarded to the container. </p>
    
  </li>


                    <li> At this point, your container should be up
                        and running. You can check that two ways. 
                      <ul>
                        <li>
                          Copy the ssh command on the top of the page
                          and paste it in on a terminal (any machine)
                          and then type <code>top</code>. You should
                          be able to see a process corresponding to
                          the the docker
                          container <code>expressapp</code>.
                        </li>

                        <li>
                          Click on the link <b>8080</b> that should
                            have appeared on the top of your session
                            once the container started to run. Your
                            browser should open a new tab associated
                            with the URL for your web service and it
                            should respond with the message you
                            defined in the file <code>index.js</code>.
                        </li>
                      </ul>
                    </li>

                </ol>

<h2 id="task-6">
  <a name="Task_6"></a>Task 6: Share (a copy of) your session</h2>

<p>There are two different ways to share work in <%= project_name %>.
The first alternative provides access to the same session via SSH; the
second alternative creates a copy of the session. The first
alternative is useful, for example, to ask for help of a colleague to
solve a problem in your setup whereas the second alternative is useful
to share your work with strangers. Let us focus on the second
alternative.</p>

<ol>
  <li> Identify the share-icon button that appears at the top of your
    screen.</li>
  <li>Click on that button, <%= project_name %> will show an
    URL associated with your session.</li>
  <li>Copy-and-paste that URL on the browser (it can be a different
  browser running on a different machine). A click on that link will
  result in the creation of a new session based on the contents of the
  original session. The sessions are different! A change in one
  session is <b>not</b> visible in the other session. If you want to
  share a running session (without copying it), use the SSH button.
  </li>
  <li>Make a different change on the string message in
  the <code>index.js</code> file and repeat the commands in this
  tutorial to confirm that both services are running and they respond
  with different strings.</li>  
</ol>

<h2 id="task-7">
  <a name="Task_7"></a>Task 7: Close session</h2>

Remove the VM from your session and then close the session. The
maximum time of a session is 2h, but it is good practice to save time
and space. You can continue your work anytime if you keep the URL for
your session.

            </div>
        </article>
    </div>
</div>
